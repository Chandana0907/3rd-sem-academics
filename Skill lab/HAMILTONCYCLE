#include<stdio.h>
 #include<stdbool.h>
 #define V 5
 void printsolution(int path[]);
 bool issafe(int v,bool graph[V][V],int path[],int pos){
     if(!graph[path[pos-1]][V])
     return false;
     for(int i=0;i<pos;i++)
     if(path[i]==v)
     return false;
     return true;
 }
 bool hamiltoncycleutil(bool graph[V][V],int path[],int pos){
     if(pos==V){
         if(graph[path[pos-1]][path[0]])
         {
             printsolution(path);
             return true;
         }
         else{
             return false;
         }}
         bool foundcycle=false;
         for(int v=1;v<V;v++){
             if(issafe(v,graph,path,pos)){
                 path[pos]=v;
                 foundcycle=hamiltoncycleutil(graph,path,pos+1)||foundcycle;
                 path[pos]=-1;
             }
         }
         return foundcycle;
 }
 bool hamiltoncycle(bool graph[V][V]){
     int path[V];
     for(int i=0;i<V;i++)
     path[i]=0;
     if(!hamiltoncycleutil(graph,path,1)){
         printf("Hamiltonian cycle does not exist.\n");
         return false;
     }
     printf("Hamiltonian cycle exists:\n");
     return true;
 }
 void printsolution(int path[]){
     for(int i=0;i<V;i++)
     printf("%d",path[i]);
     printf("%d",path[0]);
     printf("\n");
 }
 int main(){
     bool graph[V][V]={
         {0,1,1,1,0},
         {1,0,1,0,1},
         {1,1,0,1,1},
         {1,0,1,0,1},
         {0,1,1,1,0}
     };
     hamiltoncycle(graph);
     return 0;
 }
